"""Visualization utilities for TSP tours from stippling results.

This module provides comprehensive utilities for loading, processing, and
visualizing Traveling Salesman Problem (TSP) tour solutions generated from
stippling algorithms. It supports parsing standard TSP file formats and
tour files from various TSP solvers, with specialized support for Linkern
solver output.

The module enables visualization of stipple point distributions and their
corresponding optimal tour paths, making it useful for analyzing the quality
of stippling algorithms and TSP solver performance. The visualization
functions handle coordinate system transformations to ensure proper
orientation when displaying results.

Key Features:
    - Parse standard TSPLIB format files generated by stippling algorithms
    - Load tour solutions from Linkern and other TSP solvers
    - Visualize tour paths with proper coordinate system handling
    - Support for both point-only and tour path visualizations
    - Automatic coordinate flipping for correct image orientation

Supported File Formats:
    - TSP files: Standard TSPLIB format with NODE_COORD_SECTION
    - Tour files: Linkern solver output format with node sequences

Coordinate System:
    The module handles coordinate system differences between image space
    (where stipples are generated) and mathematical plotting space. Tour
    visualizations are automatically flipped to match the original image
    orientation.

Example:
    Basic usage for visualizing a TSP tour:
        >>> coords = load_tsp_coordinates('stipplings/tsp/image_5000.tsp')
        >>> tour = load_linkern_tour('visualizations/tour/image_5000.tour')
        >>> plot_flipped_tour(coords, tour)

    Loading coordinates only:
        >>> coords = load_tsp_coordinates('stipplings/tsp/image_5000.tsp')
        >>> print(f"Loaded {len(coords)} stipple points")

    Command line usage:
        $ python visualize.py --tsp-path stipplings/tsp/image_5000.tsp \\
            --tour-path visualizations/tour/image_5000.tour
        $ python visualize.py --tsp-path stipplings/tsp/image_5000.tsp \\
            --tour-path visualizations/tour/image_5000.tour \\
            --output visualizations/png/tour.png

Dependencies:
    - matplotlib: For plotting and visualization
    - Standard library: File I/O and data processing

Note:
    This module is specifically designed to work with TSP files generated
    by the weighted Voronoi stippling algorithms in this package. While
    it may work with other TSP files, optimal results are achieved when
    used with the stippling workflow.

Authors:
    Visualization utilities for stippling and TSP analysis.
"""

import argparse
import matplotlib.pyplot as plt


def load_tsp_coordinates(tsp_path):
    """Load coordinates from a TSP file format.

    Parses a TSP file and extracts the node coordinates from the
    NODE_COORD_SECTION. The TSP file format is expected to contain
    a header followed by coordinate data.

    Args:
        tsp_path (str): Path to the TSP file containing node coordinates.

    Returns:
        list: List of tuples containing (x, y) coordinate pairs as floats.
            Each tuple represents one node's position.
    """
    coords = []
    with open(tsp_path, 'r') as f:
        in_section = False
        for line in f:
            line = line.strip()
            if line == "NODE_COORD_SECTION":
                in_section = True
                continue
            if line == "EOF":
                break
            if in_section:
                parts = line.split()
                if len(parts) >= 3:
                    coords.append((float(parts[1]), float(parts[2])))
    return coords


def load_linkern_tour(tour_path):
    """Load a tour solution from a Linkern TSP solver output file.

    Parses the tour file generated by Linkern TSP solver and extracts
    the sequence of nodes that represents the optimal tour path.

    Args:
        tour_path (str): Path to the tour file containing the TSP solution.

    Returns:
        list: List of integers representing the tour sequence. Each integer
            is a 0-based node index indicating the order to visit nodes.

    Raises:
        ValueError: If no tour data is found in the file.
    """
    tour = []
    with open(tour_path, 'r') as f:
        lines = f.readlines()[1:]  # Skip first line (node count)
        if not lines:
            raise ValueError("No tour data found.")
        current = int(lines[0].split()[0])
        tour.append(current)
        for line in lines:
            parts = line.strip().split()
            if len(parts) >= 2:
                next_node = int(parts[1])
                tour.append(next_node)
    return tour


def plot_flipped_tour(coords, tour, output_file=None):
    """Plot a TSP tour with 180-degree vertical flip for correct orientation.

    Creates a visualization of the TSP tour path by connecting the nodes
    in the order specified by the tour. The plot is flipped vertically
    to correct for coordinate system differences between TSP solvers
    and typical image coordinate systems.

    Args:
        coords (list): List of (x, y) coordinate tuples for each node.
        tour (list): List of node indices representing the tour order.
        output_file (str, optional): Path to save the plot. If None,
            displays the plot interactively. Defaults to None.
    """
    # Extract and flip coordinates
    x = [coords[i][0] for i in tour] + [coords[tour[0]][0]]
    y = [coords[i][1] for i in tour] + [coords[tour[0]][1]]

    # Flip around x-axis
    y_flipped = [-yi for yi in y]

    # Plot tour as black 3pt line
    plt.figure(figsize=(10, 10))
    plt.plot(x, y_flipped, color='black', linewidth=2,
             solid_joinstyle='miter', solid_capstyle='butt')

    # Hide axes and frame
    plt.axis('off')
    plt.axis('equal')
    plt.tight_layout()

    if output_file:
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"Tour visualization saved to: {output_file}")
        plt.close()
    else:
        plt.show()


# === USAGE ===
def main():
    """Main function with command line argument parsing."""
    parser = argparse.ArgumentParser(
        description="Visualize TSP tours from stippling results"
    )
    parser.add_argument("--tsp-path", "--tsp", required=True,
                        help="Path to TSP file containing coordinates")
    parser.add_argument("--tour-path", "--tour", required=True,
                        help="Path to tour file containing TSP solution")
    parser.add_argument("--output", "-o",
                        help="Save plot to file instead of displaying "
                             "(suggested: visualizations/png/filename.png)")

    args = parser.parse_args()

    # Load data
    coords = load_tsp_coordinates(args.tsp_path)
    tour = load_linkern_tour(args.tour_path)

    # Create visualization
    plot_flipped_tour(coords, tour, args.output)


if __name__ == "__main__":
    main()
